# -*- coding: utf-8 -*-
"""Preparação_Dados_Treinamento.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vjbu-6oJPqbxnh78L538dJuT3YgdrC2d

# Bibliotecas
"""

!pip install plotly --upgrade

import pandas as pd
import numpy as np
import seaborn as sns
import plotly.express as px
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import pickle

"""# Visualização da base"""

base = pd.read_csv('/content/text.csv',index_col=0)
base.head()

base.tail()

base.describe()

sns.countplot(x = base['label'])

"""# Tratamento de valores inconsistentes

# previsores e classe
"""

x_base = base.iloc[:, 0:1 ].values
x_base

y_base = base.iloc[:,1:2 ].values
y_base

"""# Conversão de atributos categóricos - Labelencoder"""

x_base[:,1:2]

label_RatingDesc = LabelEncoder()
label_QuestionDesc = LabelEncoder()
x_base[:,0] =label_RatingDesc.fit_transform(x_base[:,0])
x_base[:,0] =label_QuestionDesc.fit_transform(x_base[:,0])

x_base

"""# Conversão de atributos categóricos - OneHotEncoder"""

onehot_veiculo = ColumnTransformer(transformers=[('OneHot',OneHotEncoder(), [0, -1])], remainder= 'passthrough')

x_base = onehot_veiculo.fit_transform(x_base)

x_base

"""# Escalonamento dos Valores"""

scale_base = StandardScaler(with_mean=False)
x_base = scale_base.fit_transform(x_base)

x_base

"""# Divisão de base em treinamento e teste"""

x_base_treinamento, x_base_teste, y_base_treinamento, y_base_teste = train_test_split(x_base, y_base, test_size= 0.20, random_state= 0)

x_base_treinamento.shape

"""# Salvar as variáveis"""

with open('base.pkl', mode= 'wb') as f:
  pickle.dump([x_base_treinamento,y_base_treinamento, x_base_teste, y_base_teste], f)